diff --git a/services/java/com/android/server/pm/PackageManagerService.java b/services/java/com/android/server/pm/PackageManagerService.java
index 220bec0..77410d2 100644
--- a/services/java/com/android/server/pm/PackageManagerService.java
+++ b/services/java/com/android/server/pm/PackageManagerService.java
@@ -510,6 +510,42 @@ public class PackageManagerService extends IPackageManager.Stub {
 
     private Map<String, Long> mAvailableCommonResources = new HashMap<String, Long>();
 
+    private static void extraCPUCores(boolean enable) {
+
+	String path_start = "/sys/devices/system/cpu/cpu";
+        String path_tail = "/online";
+	String word = "down";
+	byte zeroorone = (byte)48;
+     
+        if(enable){
+		zeroorone = (byte)49;
+		word = "up";
+	}
+
+        try{
+
+		for(int i = 1; i < 4; i ++) {
+			File cpu_online = new File(path_start + String.valueOf(i) + path_tail);
+			if(cpu_online.exists() && cpu_online.canWrite()){
+				FileOutputStream cpu_online_stream = new FileOutputStream(cpu_online);
+				Log.i("MultiThreaded-MultiCore dexopt:", "Bringing " + 
+					word +" CPU " + String.valueOf(i));
+				cpu_online_stream.write(zeroorone);
+				cpu_online_stream.close();
+				Log.i("MultiThreaded-MultiCore dexopt:", "Bringing " + 
+					word +" CPU " + String.valueOf(i) + " success!");
+			} else {
+				Log.e("MultiThreaded-MultiCore dexopt:", "Error writing to " + 
+					cpu_online.getAbsoluteFile());
+				break;
+			}
+		}
+
+       }catch (Exception ex){ex.printStackTrace();}
+
+    }
+
+
     // Set of pending broadcasts for aggregating enable/disable of components.
     static class PendingPackageBroadcasts {
         // for each user id, a map of <package name -> components within that package>
@@ -1167,6 +1203,8 @@ public class PackageManagerService extends IPackageManager.Stub {
         }
 
         mIsMultiThreaded = !"false".equals(SystemProperties.get("persist.sys.dalvik.multithread"));
+        /* Overide! Let's always use this! */
+        mIsMultiThreaded = true;
 
         mContext = context;
         mFactoryTest = factoryTest;
@@ -1287,7 +1325,10 @@ public class PackageManagerService extends IPackageManager.Stub {
                  */
                 if (mSharedLibraries.size() > 0) {
                     Iterator<SharedLibraryEntry> libs = mSharedLibraries.values().iterator();
-                    ExecutorService executorService = Executors.newFixedThreadPool(sNThreads);
+		    if(mIsMultiThreaded)
+		    	extraCPUCores(true);
+
+                    ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
                     while (libs.hasNext()) {
                         final String lib = libs.next().path;
                         if (lib == null) {
@@ -1319,6 +1360,9 @@ public class PackageManagerService extends IPackageManager.Stub {
                     executorService.shutdown();
                     try {
                         executorService.awaitTermination(1, TimeUnit.DAYS);
+        		if(mIsMultiThreaded)
+		        	extraCPUCores(false);
+
                     } catch (InterruptedException e) {
                         e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                     }
@@ -1342,7 +1386,10 @@ public class PackageManagerService extends IPackageManager.Stub {
                  */
                 String[] frameworkFiles = frameworkDir.list();
                 if (frameworkFiles != null) {
-                    ExecutorService executorService = Executors.newFixedThreadPool(sNThreads);
+		    if(mIsMultiThreaded)
+		    	extraCPUCores(true);
+
+                    ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
                     for (int i = 0; i < frameworkFiles.length; i++) {
                         File libPath = new File(frameworkDir, frameworkFiles[i]);
                         final String path = libPath.getPath();
@@ -1378,6 +1425,9 @@ public class PackageManagerService extends IPackageManager.Stub {
                     executorService.shutdown();
                     try {
                         executorService.awaitTermination(1, TimeUnit.DAYS);
+        		if(mIsMultiThreaded)
+				extraCPUCores(false);
+
                     } catch (InterruptedException e) {
                         e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                     }
@@ -3720,8 +3770,10 @@ public class PackageManagerService extends IPackageManager.Stub {
             return;
         }
 
-        ExecutorService executorService = Executors.newFixedThreadPool(sNThreads);
+	if(mIsMultiThreaded)
+		extraCPUCores(true);
 
+        ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
         if (DEBUG_PACKAGE_SCANNING) {
             Log.d(TAG, "Scanning app dir " + dir + " scanMode=" + scanMode
                     + " flags=0x" + Integer.toHexString(flags));
@@ -3757,6 +3809,9 @@ public class PackageManagerService extends IPackageManager.Stub {
         executorService.shutdown();
         try {
             executorService.awaitTermination(1, TimeUnit.DAYS);
+	        if(mIsMultiThreaded)
+		    extraCPUCores(false);
+
         } catch (InterruptedException e) {
             e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
         }
@@ -4090,7 +4145,10 @@ public class PackageManagerService extends IPackageManager.Stub {
         if (pkgs != null) {
             final AtomicInteger i = new AtomicInteger(0);
             final int pkgsSize = pkgs.size();
-            ExecutorService executorService = Executors.newFixedThreadPool(sNThreads);
+	    if(mIsMultiThreaded)
+		extraCPUCores(true);
+
+            ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
             for (PackageParser.Package pkg : pkgs) {
                 final PackageParser.Package p = pkg;
                 synchronized (mInstallLock) {
@@ -4122,6 +4180,9 @@ public class PackageManagerService extends IPackageManager.Stub {
             executorService.shutdown();
             try {
                 executorService.awaitTermination(1, TimeUnit.DAYS);
+        	if(mIsMultiThreaded)
+	        	extraCPUCores(false);
+
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
